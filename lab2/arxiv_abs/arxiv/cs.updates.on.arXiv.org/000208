In online makespan minimization a sequence of jobs $\sigma = J_1,..., J_n$ has to be scheduled on
$m$ identical parallel machines so as to minimize the maximum completion time of any job. We investigate
the problem with an essentially new model of resource augmentation. Here, an online algorithm is
allowed to build several schedules in parallel while processing $\sigma$. At the end of the scheduling
process the best schedule is selected. This model can be viewed as providing an online algorithm
with extra space, which is invested to maintain multiple solutions. The setting is of particular
interest in parallel processing environments where each processor can maintain a single or a small
set of solutions. We develop a $(4/3+\eps)$-competitive algorithm, for any $0<\eps\leq 1$,
that uses a number of $1/\eps^{O(\log (1/\eps))}$ schedules. We also give a $(1+\eps)$-competitive
algorithm, for any $0<\eps\leq 1$, that builds a polynomial number of $(m/\eps)^{O(\log (1/\eps)
/ \eps)}$ schedules. This value depends on $m$ but is independent of the input $\sigma$. The performance
guarantees are nearly best possible. We show that any algorithm that achieves a competitiveness
smaller than 4/3 must construct $\Omega(m)$ schedules. Our algorithms make use of novel guessing
schemes that (1) predict the optimum makespan of a job sequence $\sigma$ to within a factor of $1+\eps$
and (2) guess the job processing times and their frequencies in $\sigma$. In (2) we have to sparsify
the universe of all guesses so as to reduce the number of schedules to a constant. The competitive
ratios achieved using parallel schedules are considerably smaller than those in the standard problem
without resource augmentation. 