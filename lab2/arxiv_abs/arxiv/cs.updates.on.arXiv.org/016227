Computer systems are designed to make resources available to users and users may be interested in
some resources more than others, therefore, a coordination scheme is required to satisfy the users'
requirements. This scheme may implement certain policies such as "never allocate more than X units
of resource Z". One policy that is of particular interest is the inability of users to access a single
resource at the same time, which is called the problem of mutual exclusion. Resource management
concerns the coordination and collaboration of users, and it is usually based on making a decision.
In the case of mutual exclusion, that decision is about granting access to a resource. Therefore,
mutual exclusion is useful for supporting resource access management. The first true solution
to the mutual exclusion problem is known as the Bakery algorithm that does not rely on any lower-lever
mutual exclusion. We examine the problem of register overflow in real-world implementations of
the Bakery algorithm and present a variant algorithm named Bakery++ that prevents overflows from
ever happening. Bakery++ avoids overflows without allowing a process to write into other processes'
memory and without using additional memory or complex arithmetic or redefining the operations
and functions used in Bakery. Bakery++ is almost as simple as Bakery and it is straightforward to
implement in real systems. With Bakery++, there is no reason to keep implementing Bakery in real
computers because Bakery++ eliminates the probability of overflows and hence it is more practical
than Bakery. Previous approaches to circumvent the problem of register overflow included introducing
new variables or redefining the operations or functions used in the original Bakery algorithm,
while Bakery++ avoids overflows by using simple conditional statements. (the abstract does not
end here.) 