This paper presents constructive proofs of some interesting properties of the primes of logic functions
that relate to the problem of finding a minimum-cost sum-of-primes representation of a logic function
f. The proof of the main result, the Partition Theorem, constructs canonical disjoint subsets PSn,
n = 1,..., N of the primes of f and corresponding matrices of covering relationships, Tn, such that
finding a minimum-cost basis is reduced to finding minimum-cost subsets QSn of PSn such that QSn
covers PSn relative to Tn. The algorithms generate the following canonical partition of the primes
of f into independent disjoint prime sets, f = sum(FreePrimes) + sum(PS1) + . . . + sum(PSn) + sum(<
Surplus >) where FreePrimes = the essential primes + primes covered by the essential primes,
PS1,...,PSn are disjoint canonical sets of non-free primes, such that for any cost function C that
assigns a positive cost to each product, any minimum-cost cover of f must consist of the essential
primes and subsets QSi of PSi that cover PSi and depend on C. < Surplus >= non-free primes that
cannot be part of any minimum-cost solution for any positive cost function. The algorithms calculate
the members of FreePrimes, PSi and < Surplus >, and, in some cases, some or all QSi. The key to
the results is the study of objects called ancestor sets. The Ancestor Theorem proves that a minimum-cost
sum-of-primes for a logic function must equal the essential primes plus the sum of the minimum-cost
covers QSi (contained in PSi) of canonical independent disjoint ancestor sets Ai. The ancestor
sets are easy to generate when the calculation of the primes is within computational scope. (The
worst-case estimate of the total number of primes associated with a logic function is exponential.)
