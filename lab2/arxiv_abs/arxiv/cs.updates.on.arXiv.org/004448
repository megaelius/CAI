We revisit multipass pairing heaps and path-balanced binary search trees (BSTs), two classical
algorithms for data structure maintenance. The pairing heap is a simple and efficient "self-adjusting"
heap, introduced in 1986 by Fredman, Sedgewick, Sleator, and Tarjan. In the multipass variant (one
of the original pairing heap variants described by Fredman et al.) the minimum item is extracted
via repeated pairing rounds in which neighboring siblings are linked. Path-balanced BSTs, proposed
by Sleator (Subramanian, 1996), are a natural alternative to Splay trees (Sleator and Tarjan, 1983).
In a path-balanced BST, whenever an item is accessed, the search path leading to that item is re-arranged
into a balanced tree. Despite their simplicity, both algorithms turned out to be difficult to analyse.
Fredman et al. showed that operations in multipass pairing heaps take amortized $O(\log{n} \cdot
\log\log{n} / \log\log\log{n})$ time. For searching in path-balanced BSTs, Balasubramanian
and Raman showed in 1995 the same amortized time bound of $O(\log{n} \cdot \log\log{n} / \log\log\log{n})$,
using a different argument. In this paper we show an explicit connection between the two algorithms
and improve the two bounds to $O\left(\log{n} \cdot 2^{\log^{\ast}{n}} \cdot \log^{\ast}{n}\right)$,
respectively $O\left(\log{n} \cdot 2^{\log^{\ast}{n}} \cdot (\log^{\ast}{n})^2 \right)$,
where $\log^{\ast}(\cdot)$ denotes the very slowly growing iterated logarithm function. These
are the first improvements in more than three, resp. two decades, approaching in both cases the information-theoretic
lower bound of $\Omega(\log{n})$. 