The suffix array is a fundamental data structure for many applications that involve string searching
and data compression. Designing time/space-efficient suffix array construction algorithms
has attracted significant attentions and considerable advances have been made in the last 20 years.
We obtain the \emph{first} in-place suffix array construction algorithms that are optimal both
in time and space for (read-only) integer alphabets. Concretely, we make the following contributions:
1. For the integer alphabets, we obtain the first suffix sorting algorithm which takes linear time
and uses only $O(1)$ workspace (the workspace is the space needed beyond the input string and the
output suffix array). The input string may be modified during the execution of the algorithm. Our
C implementation of the algorithm requires only 8 Bytes of the workspace. 2. We strengthen the first
result by providing the first linear time in-place algorithm for read-only integer alphabets with
$|\Sigma|=O(n)$ (i.e., the input string cannot be modified). This algorithm settles the open problem
posed by [Franceschini and Muthukrishnan, ICALP'07]. The open problem asked to design in-place
algorithms in $o(n\log n)$ time and ultimately, in $O(n)$ time for (read-only) integer alphabets
with $|\Sigma| \leq n$. Our result is in fact slightly stronger since we allow $|\Sigma|=O(n)$.
3. Besides, for the read-only general alphabets (i.e., only comparisons are allowed), we present
an optimal $O(n\log n)$ time in-place suffix sorting algorithm, recovering the result obtained
by Franceschini and Muthukrishnan which was an open problem posed by [Manzini and Ferragina, ESA'02].
