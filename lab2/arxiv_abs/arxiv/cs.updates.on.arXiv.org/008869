The focus of this work is to show how to combine Zech's logarithms and each of the cycle joining and
cross-join pairing methods to construct binary de Bruijn sequences of any order. A basic implementation
is supplied as a proof-of-concept. The cycles, in the cycle joining method, are typically generated
by a linear feedback shift register. We prove a crucial characterization that determining Zech's
logarithms is equivalent to identifying conjugate pairs shared by any two distinct cycles. This
speeds up the task of building a connected adjacency subgraph that contains all vertices of the complete
adjacency graph. Distinct spanning trees in either graph correspond to cyclically inequivalent
de Bruijn sequences. As the cycles are being joined, guided by the conjugate pairs, we track the changes
in the feedback function. Certificates of star or almost-star spanning trees conveniently handle
large order cases. The characterization of conjugate pairs via Zech's logarithms, as positional
markings, is then adapted to identify cross-join pairs. A modified $m$-sequence is initially used,
for ease of generation. The process can be repeated on each of the resulting de Bruijn sequences.
We show how to integrate an analytic tool, attributed to Fryers, in the process. Most prior constructions
in the literature measure the complexity of the corresponding bit-by-bit algorithms. Our approach
is different. We aim first to build a connected adjacency subgraph that is certified to contain all
of the cycles as vertices. The ingredients are computed just once and concisely stored. Simple strategies
are offered to keep the complexities low as the order grows. 