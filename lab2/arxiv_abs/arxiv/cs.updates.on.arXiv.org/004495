A heterogeneous architecture composed by a host and an accelerator must frequently deal with situations
where several independent tasks are available to be offloaded onto the accelerator. These tasks
can be generated by concurrent applications executing in the host or, in case the host is a node of
a computer cluster, by applications running on other cluster nodes that are willing to offload tasks
in the accelerator connected to the host. In this work we show that a runtime scheduler that selects
the best execution order of a group of tasks on the accelerator can significantly reduce the total
execution time of the tasks and, consequently, increase the accelerator use. Our solution is based
on a temporal execution model that is able to predict with high accuracy the execution time of a set
of concurrent tasks launched on the accelerator. The execution model has been validated in AMD,
NVIDIA, and Xeon Phi devices using synthetic benchmarks. Moreover, employing the temporal execution
model, a heuristic is proposed which is able to establish a near-optimal tasks execution ordering
that significantly reduces the total execution time, including data transfers.The heuristic
has been evaluated with five different benchmarks composed of dominant kernel and dominant transfer
real tasks. Experiments indicate the heuristic is able to find always an ordering with a better execution
time than the average of every possible execution order and, most times, it achieves a near-optimal
ordering (very close to the execution time of the best execution order) with a negligible overhead.
Concretely, our heuristic obtains, on average for all the devices, between 84\% and 96\% of the improvement
achieved by the best execution order. 