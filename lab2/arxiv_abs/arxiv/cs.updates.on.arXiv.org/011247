We understand a multiagent system (MAS) as a decentralized system of agents. Specifically, agents
represent autonomous principals; consequently, in general, they would be independently constructed
or configured and their computations loosely coupled. For this reason, it is appropriate to adopt
a programming model for interactions among the agents that is based on asynchronous messaging.
A communication protocol, understood as a specification of constraints on messaging between agents,
serves as the primary operational specification of a multiagent system. The significance of protocols
for engineering MAS has inspired two decades of research on protocol languages. Modern protocol
languages typically address decentralization. However, modern languages differ in important
ways in their basic abstractions and operational assumptions. This diversity makes a comparative
evaluation of protocol languages a challenging task. We contribute a rich evaluation of modern
protocol languages based on diverse approaches. Among the selected languages, Scribble is based
on session types; Trace-C and Trace-F on trace expressions; HAPN on hierarchical state machines,
and BSPL on information causality. Our contribution is four-fold. One, we contribute a set of important
criteria for evaluating protocol languages. Two, for each criterion, we compare the languages
on the basis of whether they are able to encode elementary scenarios that go to the heart of the criterion.
Three, for each language, we map our findings to a canonical architecture style for MAS, highlighting
where the languages depart from the architecture. Four, we identify a few design principles for
protocol languages as guidance for future research. 