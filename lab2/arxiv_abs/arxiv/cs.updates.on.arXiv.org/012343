Butterflies are the smallest non-trivial subgraph in bipartite graphs, and therefore having efficient
computations for analyzing them is crucial to improving the quality of certain applications on
bipartite graphs. In this paper, we design a framework called ParButterfly that contains new parallel
algorithms for the following problems on processing butterflies: global counting, per-vertex
counting, per-edge counting, tip decomposition (vertex peeling), and wing decomposition (edge
peeling). The main component of these algorithms is aggregating wedges incident on subsets of vertices,
and our framework supports different methods for wedge aggregation, including sorting, hashing,
histogramming, and batching. In addition, ParButterfly supports different ways of ranking the
vertices to speed up counting, including side ordering, approximate and exact degree ordering,
and approximate and exact complement coreness ordering. For counting, ParButterfly also supports
both exact computation as well as approximate computation via graph sparsification. We prove strong
theoretical guarantees on the work and span of the algorithms in ParButterfly. We perform a comprehensive
evaluation of all of the algorithms in ParButterfly on a collection of real-world bipartite graphs
using a 48-core machine. Our counting algorithms obtain significant parallel speedup, outperforming
the fastest sequential algorithms by up to 13.6x with a self-relative speedup of up to 38.5x. Compared
to general subgraph counting solutions, we are orders of magnitude faster. Our peeling algorithms
achieve self-relative speedups of up to 10.7x and outperform the fastest sequential baseline by
up to several orders of magnitude. 