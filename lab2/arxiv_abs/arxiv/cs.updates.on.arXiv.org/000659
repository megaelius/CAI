Adaptive indexing is a concept that considers index creation in databases as a by-product of query
processing; as opposed to traditional full index creation where the indexing effort is performed
up front before answering any queries. Adaptive indexing has received a considerable amount of
attention, and several algorithms have been proposed over the past few years; including a recent
experimental study comparing a large number of existing methods. Until now, however, most adaptive
indexing algorithms have been designed single-threaded, yet with multi-core systems already
well established, the idea of designing parallel algorithms for adaptive indexing is very natural.
In this regard only one parallel algorithm for adaptive indexing has recently appeared in the literature:
The parallel version of standard cracking. In this paper we describe three alternative parallel
algorithms for adaptive indexing, including a second variant of a parallel standard cracking algorithm.
Additionally, we describe a hybrid parallel sorting algorithm, and a NUMA-aware method based on
sorting. We then thoroughly compare all these algorithms experimentally; along a variant of a recently
published parallel version of radix sort. Parallel sorting algorithms serve as a realistic baseline
for multi-threaded adaptive indexing techniques. In total we experimentally compare seven parallel
algorithms. Additionally, we extensively profile all considered algorithms. The initial set
of experiments considered in this paper indicates that our parallel algorithms significantly
improve over previously known ones. Our results suggest that, although adaptive indexing algorithms
are a good design choice in single-threaded environments, the rules change considerably in the
parallel case. That is, in future highly-parallel environments, sorting algorithms could be serious
alternatives to adaptive indexing. 