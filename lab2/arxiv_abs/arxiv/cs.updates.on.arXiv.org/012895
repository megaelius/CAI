The rowhammer bug allows an attacker to gain privilege escalation or steal private data. A key requirement
of all existing rowhammer attacks is that an attacker must have access to at least part of an exploitable
hammer row. We refer to such rowhammer attacks as PeriHammer. The state-of-the-art software-only
defenses against PeriHammer attacks is to make the exploitable hammer rows beyond the attacker's
access permission. In this paper, we question the necessity of the above requirement and propose
a new class of rowhammer attacks, termed as TeleHammer. It is a paradigm shift in rowhammer attacks
since it crosses privilege boundary to stealthily rowhammer an inaccessible row by implicit DRAM
accesses. Such accesses are achieved by abusing inherent features of modern hardware and or software.
We propose a generic model to rigorously formalize the necessary conditions to initiate TeleHammer
and PeriHammer, respectively. Compared to PeriHammer, TeleHammer can defeat the advanced software-only
defenses, stealthy in hiding itself and hard to be mitigated. To demonstrate the practicality of
TeleHammer and its advantages, we have created a TeleHammer's instance, called PThammer, which
leverages the address-translation feature of modern processors. We observe that a memory access
from user space can induce a load of a Level-1 page-table entry (L1PTE) from memory and thus hammer
the L1PTE once, although L1PTE is not accessible to us. To achieve a high enough hammering frequency,
we flush relevant TLB and cache effectively and efficiently. To this end, we demonstrate PThammer
on three different test machines and show that it can cross user-kernel boundary and induce the first
bit flips in L1PTEs within 15 minutes of double-sided PThammering. We have exploited PThammer to
defeat advanced software-only rowhammer defenses in default system setting. 