We present Predicted Variables (PVars), an approach to making machine learning (ML) a first class
citizen in programming languages. There is a growing divide in approaches to building systems:
using human experts (e.g. programming) on the one hand, and using behavior learned from data (e.g.
ML) on the other hand. PVars aim to make ML in programming as easy as `if' statements and with that hybridize
ML with programming. We leverage the existing concept of variables and create a new type, a predicted
variable. PVars are akin to native variables with one important distinction: PVars determine their
value using ML when evaluated. We describe PVars and their interface, how they can be used in programming,
and demonstrate the feasibility of our approach on three algorithmic problems: binary search,
Quicksort, and caches. We show experimentally that PVars are able to improve over the commonly used
heuristics and lead to a better performance than the original algorithms. As opposed to previous
work applying ML to algorithmic problems, PVars have the advantage that they can be used within the
existing frameworks and do not require the existing domain knowledge to be replaced. PVars allow
for a seamless integration of ML into existing systems and algorithms. Our PVars implementation
currently relies on standard Reinforcement Learning (RL) methods. To learn faster, PVars use the
heuristic function, which they are replacing, as an initial function. We show that PVars quickly
pick up the behavior of the initial function and then improve performance beyond that without ever
performing substantially worse -- allowing for a safe deployment in critical applications. 