Background. Pull requests are a common practice for contributing and reviewing contributions,
and are employed both in open-source and industrial contexts. One of the main goals of code reviews
is to find defects in the code, allowing project maintainers to easily integrate external contributions
into a project and discuss the code contributions. Objective. The goal of this paper is to understand
whether code quality is actually considered when pull requests are accepted. Specifically, we
aim at understanding whether code quality issues such as code smells, antipatterns, and coding
style violations in the pull request code affect the chance of its acceptance when reviewed by a maintainer
of the project. Method. We conducted a case study among 28 Java open-source projects, analyzing
the presence of 4.7 M code quality issues in 36 K pull requests. We analyzed further correlations
by applying Logistic Regression and seven machine learning techniques (Decision Tree, Random
Forest, Extremely Randomized Trees, AdaBoost, Gradient Boosting, XGBoost). Results. Unexpectedly,
code quality turned out not to affect the acceptance of a pull request at all. As suggested by other
works, other factors such as the reputation of the maintainer and the importance of the feature delivered
might be more important than code quality in terms of pull request acceptance. Conclusions. Researchers
already investigated the influence of the developers' reputation and the pull request acceptance.
This is the first work investigating if quality of the code in pull requests affects the acceptance
of the pull request or not. We recommend that researchers further investigate this topic to understand
if different measures or different tools could provide some useful measures. 