Control Network Programming (CNP) is a programming paradigm which is being described with the maxim
"Primitives + Control Network = Control Network program". It is a type of graphic programming. The
Control Network is a recursive system of graphs; it can be a purely descriptive specification of
the problem being solved. Clearly, "drawing" the control network does not include any programming.
The Primitives are elementary, easily understandable and clearly specified actions. Ultimately,
they have to be programmed. Historically, they are usually coded in Free Pascal. The actual code
of the primitives has never been considered important. The essence of an "algorithm" is represented
by its control network. CNP was always meant to be an easy and fast approach for software application
development that actually involves very little real programming. Language interoperability
(using different languages in the same software project) is a distinguished current trend in software
development. It is even more important and natural in the case of CNP than for other programming paradigms.
Here, interoperability practically means the possibility to use primitives written in various
programming languages. The current report describes our first steps in creating applications
using a multi-language set of primitives. Most popular and interesting programming languages
have been addressed: Python, Java, and C. We show how to create applications with primitives written
in those "non-native" languages. We consider examples where the primitives in all those four programming
languages are simultaneously used (multiple-language CNP). We also discuss CNP programming without
programming (language-free CNP). 