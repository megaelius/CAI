Microtask programming is a form of crowdsourcing for programming in which implementation work
is decomposed into short, self-contained microtasks. Each microtask offers a specific goal (e.g.,
write a unit test) as well as all of the required context and environment support necessary to accomplish
this goal. Key to microtasking is the choice of workflow, which delineates the microtasks developers
may complete and how contributions from each are aggregated to generate the final software product.
Existing approaches either rely on a single developer to manually generate all microtasks, limiting
their potential scalability, or impose coordination requirements which limit their effectiveness.
Inspired by behavior-driven development, we describe a novel workflow for decomposing programming
into microtasks in which each microtask involves identifying, testing, implementing, and debugging
an individual behavior within a single function. We apply this approach to the implementation of
microservices, demonstrating the first approach for implementing a microservice through microtasks.
To evaluate our approach, we conducted a user study in which a small crowd worked to implement a simple
microservice and test suite. We found that the crowd was able to use a behavior-driven microtask
workflow to successfully complete 350 microtasks and implement 13 functions, quickly onboard
and submit their first microtask in less than 24 minutes, contribute new behaviors in less than 5
minutes, and together implement a functioning microservice with only four defects. We discuss
these findings and their implications for incorporating microtask work into open source projects.
