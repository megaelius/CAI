Probabilistic programming provides a convenient lingua franca for writing succinct and rigorous
descriptions of probabilistic models and inference tasks. Several probabilistic programming
languages, including Anglican, Church or Hakaru, derive their expressiveness from a powerful
combination of continuous distributions, conditioning, and higher-order functions. Although
very important for practical applications, these combined features raise fundamental challenges
for program semantics and verification. Several recent works offer promising answers to these
challenges, but their primary focus is on semantical issues. In this paper, we take a step further
and we develop a set of program logics, named PPV, for proving properties of programs written in an
expressive probabilistic higher-order language with continuous distributions and operators
for conditioning distributions by real-valued functions. Pleasingly, our program logics retain
the comfortable reasoning style of informal proofs thanks to carefully selected axiomatizations
of key results from probability theory. The versatility of our logics is illustrated through the
formal verification of several intricate examples from statistics, probabilistic inference,
and machine learning. We further show the expressiveness of our logics by giving sound embeddings
of existing logics. In particular, we do this in a parametric way by showing how the semantics idea
of (unary and relational) TT-lifting can be internalized in our logics. The soundness of PPV follows
by interpreting programs and assertions in quasi-Borel spaces (QBS), a recently proposed variant
of Borel spaces with a good structure for interpreting higher order probabilistic programs. 