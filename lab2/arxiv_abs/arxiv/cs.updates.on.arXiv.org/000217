The present work proves that P=NP. The proof, presented in this work, is a constructive one: the program
of polynomial time deterministic multi-tape Turing machine M_ExistAcceptingPaths, that determines
if there exist accepting computational paths of a polynomial time non-deterministic single-tape
Turing machine M_NP, is constructed. The concept of the construction of machine M_ExistAcceptingPaths
is to subtract the count of k-length tape-inconsistent sequences of computation steps of machine
M_NP from the count of k-length tape-arbitrary sequences of computation steps of machine M_NP to
get the count of k-length tape-consistent sequences of computation steps of machine M_NP. The count
of k-length tape-consistent sequences of computation steps of machine M_NP is equal to the count
of k-length accepting computation paths of machine M_NP, so we can determine if there exist accepting
computation paths of machine M_NP. The problem of counting the tape-inconsistent sequences of
computation steps is reduced to the problem of finding an optimal integral solution of the multi-commodities
flow problem such that its linear program is an integral linear program. If one uses polynomial t(n),
an upper bound of the time complexity of machine M_NP, in the computations then machine M_ExistsAcceptingPaths
counts (but does not enumerate) all the t(n)_{<=}-length accepting computation paths of machine
M_NP. So #P=FP if class #P is defined in such a way that it is acceptable to use polynomial t(n) in the
counting functions from #P. The time complexity of machine M_ExistsAcceptingPaths is O(t(n)^52
log(t(n))^8.5). 