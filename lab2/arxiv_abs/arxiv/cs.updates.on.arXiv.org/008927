Lean processes focus on doing only necessery things in an efficient way. Artificial intelligence
and Machine Learning offer new opportunities to optimizing processes. The presented approach
demonstrates an improvement of the test process by using Machine Learning as a support tool for test
management. The scope is the semi-automation of the selection of regression tests. The proposed
lean testing process uses Machine Learning as a supporting machine, while keeping the human test
manager in charge of the adequate test case selection. 1 Introduction Many established long running
projects and programs are execute regression tests during the release tests. The regression tests
are the part of the release test to ensure that functionality from past releases still works fine
in the new release. In many projects, a significant part of these regression tests are not automated
and therefore executed manually. Manual tests are expensive and time intensive [1], which is why
often only a relevant subset of all possible regression tests are executed in order to safe time and
money. Depending on the software process, different approaches can be used to identify the right
set of regression tests. The source code file level is a frequent entry point for this identification
[2]. Advanced approaches combine different file level methods [3]. To handle black-box tests,
methods like [4] or [5] can be used for test case prioritiza-tion. To decide which tests can be skipped,
a relevance ranking of the tests in a regression test suite is needed. Based on the relevance a test
is in or out of the regression test set for a specific release. This decision is a task of the test manager
supported by experts. The task can be time-consuming in case of big (often a 4-to 5-digit number)
regression test suites because the selection is specific to each release. Trends are going to continuous
prioritization [6], which this work wants to support with the presented ML based approach for black
box regression test case prioritization. Any regression test selection is made upon release specific
changes. Changes can be new or deleted code based on refactoring or implementation of new features.
But also changes on externals systems which are connected by interfaces have to be considered 