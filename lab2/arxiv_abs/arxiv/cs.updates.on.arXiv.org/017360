Nowadays, blockchain technologies are increasingly adopted for different purposes and in different
application domains. Accordingly, more and more applications are developed for running on a distributed
ledger technology (i.e., \textit{dApps}). The business logic of a dApp (or part of it) is usually
implemented within one (or more) smart contract(s) developed through Solidity, an object-oriented
programming language for writing smart contracts on different blockchain platforms, including
the popular Ethereum. In Ethereum, once compiled, the smart contracts run on the machines of miners
who can earn Ethers (a cryptographic currency like Bitcoin) by contributing their computing resources
and the \textit{gas} (in Ether) corresponds to the execution fee compensating such computing resources.
However, the deployment and execution costs of a smart contract strictly depend on the choices done
by developers while implementing it. Unappropriated design choices -- e.g., in the data structures
and the specific instructions used -- could lead to higher gas consumption than necessary. In this
paper, we systematically identify a set of 20 Solidity code smells that could affect the deployment
and transaction costs of a smart contract, i.e., \textit{cost smells}. On top of these smells, we
propose GasMet, a suite of metrics for statically evaluating the code quality of a smart contract,
from the gas consumption perspective. In an experiment involving 2,186 real-world smart contracts,
we demonstrate that the proposed metrics (i) have direct associations with deployment costs, and
(ii) they could be used to properly identify the level of gas consumption of a smart contract without
the need for deploying it. 