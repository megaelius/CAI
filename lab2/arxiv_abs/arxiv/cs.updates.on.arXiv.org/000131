What is the value of information in solving linear programming? The celebrated ellipsoid algorithm
tells us that the full information of input constraints is not necessary; the algorithm works as
long as there exists an oracle that, on a proposed candidate solution, returns a violation in the
format of a separating hyperplane. Can linear programming still be efficiently solved if the returned
violation is in another format? We study this question in a trial-and-error setting: there is an
oracle that, upon a proposed solution, returns the index of an arbitrary violated constraint (with
the content of the constraint still hidden). We give an algorithm with running time O(m^{poly(n)}
L), where m and n are the numbers of constraints and variables, respectively, and L is the input size
of the linear program. The exponential dependence on n is unfortunately unavoidable; we show a lower
bound of \Omega(m^{\lfloor n/2\rfloor}) on the number of queries needed. Meanwhile, if the oracle
provides more violation information---the index of a "most violated" constraint, measured by
the Euclidean distance of the proposed solution and the half-spaces defined by the constraints---then
we show that the linear program can be solved in polynomial time. The proofs of the results employ
a variety of geometric techniques, including McMullen's Upper Bound Theorem, the weighted spherical
Voronoi diagram, and the furthest Voronoi diagram. In addition, we give an alternative proof to
a conjecture of L\'aszl\'o Fejes T\'oth on bounding the number of disconnected components formed
by the union of m convex bodies in R^n. Our proof, inspired by the Gauss-Bonnet Theorem in global differential
geometry, is independent of the known and clearly reveals more insights into the problem and bound.
