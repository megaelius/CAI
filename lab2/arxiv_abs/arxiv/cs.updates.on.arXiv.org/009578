Background. During collaborative software development, developers often use branches to add
features or fix bugs. When merging changes from two branches, conflicts may occur if the changes
are inconsistent. Developers need to resolve these conflicts before completing the merge, which
is an error-prone and time-consuming process. Early detection of merge conflicts, which warns
developers about resolving conflicts before they become large and complicated, is among the ways
of dealing with this problem. Existing techniques do this by continuously pulling and merging all
combinations of branches in the background to notify developers as soon as a conflict occurs, which
is a computationally expensive process. One potential way for reducing this cost is to use a machine-learning
based conflict predictor that filters out the merge scenarios that are not likely to have conflicts,
ie safe merge scenarios. Aims. In this paper, we assess if conflict prediction is feasible. Method.
We design a classifier for predicting merge conflicts, based on 9 light-weight Git feature sets.
To evaluate our predictor, we perform a large-scale study on 267, 657 merge scenarios from 744 GitHub
repositories in seven programming languages. Results. Our results show that we achieve high f1-scores,
varying from 0.95 to 0.97 for different programming languages, when predicting safe merge scenarios.
The f1-score is between 0.57 and 0.68 for the conflicting merge scenarios. Conclusions. Predicting
merge conflicts is feasible in practice, especially in the context of predicting safe merge scenarios
as a pre-filtering step for speculative merging. 