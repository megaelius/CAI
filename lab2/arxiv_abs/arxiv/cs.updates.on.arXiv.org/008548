Computer systems can be found everywhere: in space, in our homes, in our cars, in our pockets, and
sometimes even in our own bodies. For concerns of safety, economy, and convenience, it is important
that such systems work correctly. However, it is a notoriously difficult task to ensure that the
software running on computers behaves correctly. One approach to ease this task is that of model
checking, where a model of the system is made using some mathematical formalism. Requirements expressed
in a formal language can then be verified against the model in order to give guarantees that the model
satisfies the requirements. For many computer systems, time is an important factor. As such, we
need our formalisms and requirement languages to be able to incorporate real time. We therefore
develop formalisms and algorithms that allow us to compare and express properties about real-time
systems. We first introduce a logical formalism for reasoning about upper and lower bounds on time,
and study the properties of this formalism, including axiomatisation and algorithms for checking
when a formula is satisfied. We then consider the question of when a system is faster than another
system. We show that this is a difficult question which can not be answered in general, but we identify
special cases where this question can be answered. We also show that under this notion of faster-than,
a local increase in speed may lead to a global decrease in speed, and we take step towards avoiding
this. Finally, we consider how to compare the real-time behaviour of systems not just qualitatively,
but also quantitatively. Thus, we are interested in knowing how much one system is faster or slower
than another system. This is done by introducing a distance between systems. We show how to compute
this distance and that it behaves well with respect to certain properties. 