Choreographic Programming is a correct-by-construction paradigm for distributed programming,
where global declarative descriptions of communications (choreographies) are used to synthesise
deadlock-free processes. Choreographies are global descriptions of communications in concurrent
systems, which have been used in different methodologies for the verification or synthesis of programs.
However, there is no formalisation that provides a chain of correctness from choreographies to
their implementations. This problem originates from the gap between previous theoretical models,
which abstract communications using channel names (\`a la CCS/$\pi$-calculus), and their implementations,
which use low-level mechanisms for message routing. As a solution, we propose the framework of Applied
Choreographies (AC). In AC, programmers write choreographies in a language that follows the standard
syntax and semantics of previous works. Then, choreographies are compiled to a real-world execution
model for Service-Oriented Computing (SOC). To manage the complexity of this task, our compilation
happens in three steps, respectively dealing with: implementing name-based communications using
the concrete mechanism found in SOC, projecting a choreography to a set of processes, and translating
processes to a distributed implementation in terms of services. For each step a suitable correspondence
result guarantees that the behaviour is preserved, thus ensuring the correctness of the global
compilation process. This is the first correctness result of an end-to-end translation from standard
choreographies to programs based on a "real-world" communication mechanism. 