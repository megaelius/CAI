We present trade-offs in the incremental and fully dynamic settings to maintian a proper coloring.
For any fully dynamic $2$-coloring algorithm, the maximum of the update time, number of recolorings,
and query time is $\Omega(\log n)$. We present a deterministic fully dynamic $2$-coloring algorithm
with $O(\log^2 n)$ amortized update time, $O(\log n)$ amortized query time, and one recoloring
in the worst case. For any incremental $2$-coloring algorithm which explicitly maintains the color
of every vertex after each update, the amortized update time and the amortized number of recolorings
is $\Omega(\log n)$. For such an algorithm, in the worst case the update time and the number of recolorings
is $\Omega(n)$. We then design a deterministic incremental $2$-coloring algorithm which explicitly
maintains the color of every vertex after each update, with amortized $O(\log n)$ update time and
amortized $O(\log n)$ many recolorings. Further, in the worst case the update time and the number
of recolorings is $O(n)$. Further, we present a deterministic incremental $(1+2 \log n)$-coloring
algorithm which explicitly maintains the color of every vertex after each update, with $O(\alpha(n))$
amortized update time, at most one recoloring and $O(1)$ query time. We then show a deterministic
incremental $2$-coloring algorithm which does not maintain color of every vertex after each update,
with amortized $O(\alpha(n))$ update time, amortized $O(\alpha(n))$ recolorings, and amortized
$O(\alpha(n))$ query time. For general graphs and graphs of bounded arboricity $\gamma$ and maximum
degree $\Delta$ we present a deterministic $(\Delta+1)$-coloring algorithm with $O(\sqrt{m})$
update time, $O(1)$ query time, and one recoloring. Finally, we show a deterministic $(\Delta+1)$-coloring
algorithm with amortized $O(\gamma + \log{n})$ update time, $O(1)$ query time, and one recoloring.
