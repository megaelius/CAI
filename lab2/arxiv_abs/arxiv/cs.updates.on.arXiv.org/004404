Secure multi-party computation (MPC) is a general cryptographic technique that allows distrusting
parties to compute a function of their individual inputs, while only revealing the output of the
function. It has found applications in areas such as auctioning, email filtering, and secure teleconference.
Given its importance, it is crucial that the protocols are specified and implemented correctly.
In the programming language community it has become good practice to use computer proof assistants
to verify correctness proofs. In the field of cryptography, EasyCrypt is the state of the art proof
assistant. It provides an embedded language for probabilistic programming, together with a specialized
logic, embedded into an ambient general purpose higher-order logic. It allows us to conveniently
express cryptographic properties. EasyCrypt has been used successfully on many applications,
including public-key encryption, signatures, garbled circuits and differential privacy. Here
we show for the first time that it can also be used to prove security of MPC against a malicious adversary.
We formalize additive and replicated secret sharing schemes and apply them to Maurer's MPC protocol
for secure addition and multiplication. Our method extends to general polynomial functions. We
follow the insights from EasyCrypt that security proofs can be often be reduced to proofs about program
equivalence, a topic that is well understood in the verification of programming languages. In particular,
we show that in the passive case the non-interference-based definition is equivalent to a standard
game-based security definition. For the active case we provide a new NI definition, which we call
input independence. 