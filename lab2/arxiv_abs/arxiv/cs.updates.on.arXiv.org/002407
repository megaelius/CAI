Modern Systems-on-Chip (SoC) designs are increasingly heterogeneous and contain specialized
semi-programmable accelerators in addition to programmable processors. In contrast to the pre-accelerator
era, when the ISA played an important role in verification by enabling a clean separation of concerns
between software and hardware, verification of these "accelerator-rich" SoCs presents new challenges.
From the perspective of hardware designers, there is a lack of a common framework for the formal functional
specification of accelerator behavior. From the perspective of software developers, there exists
no unified framework for reasoning about software/hardware interactions of programs that interact
with accelerators. This paper addresses these challenges by providing a formal specification
and high-level abstraction for accelerator functional behavior. It formalizes the concept of
an Instruction Level Abstraction (ILA), developed informally in our previous work, and shows its
application in modeling and verification of accelerators. This formal ILA extends the familiar
notion of instructions to accelerators and provides a uniform, modular, and hierarchical abstraction
for modeling software-visible behavior of both accelerators and programmable processors. We
demonstrate the applicability of the ILA through several case studies of accelerators (for image
processing, machine learning, and cryptography), and a general-purpose processor (RISC-V).
We show how the ILA model facilitates equivalence checking between two ILAs, and between an ILA and
its hardware finite-state machine (FSM) implementation. Further, this equivalence checking
supports accelerator upgrades using the notion of ILA compatibility, similar to processor upgrades
using ISA compatibility. 