Automated test case generation is an effective technique to yield high-coverage test suites. While
the majority of research effort has been devoted to satisfying coverage criteria, a recent trend
emerged towards optimizing other non-coverage aspects. In this regard, runtime and memory usage
are two essential dimensions: less expensive tests reduce the resource demands for the generation
process and for later regression testing phases. This study shows that performance-aware test
case generation requires solving two main challenges: providing accurate measurements of resource
usage with minimal overhead and avoiding detrimental effects on both final coverage and fault detection
effectiveness. To tackle these challenges we conceived a set of performance proxies (inspired
by previous work on performance testing) that provide an approximation of the test execution costs
(i.e., runtime and memory usage). Thus, we propose an adaptive strategy, called pDynaMOSA, which
leverages these proxies by extending DynaMOSA, a state-of-the-art evolutionary algorithm in
unit testing. Our empirical study --involving 110 non-trivial Java classes--reveals that our
adaptive approach has comparable results to DynaMOSA over seven different coverage criteria (including
branch, line, and weak mutation coverage) and similar fault detection effectiveness (measured
via strong mutation coverage). Additionally, we observe statistically significant improvements
regarding runtime and memory usage for test suites with a similar level of target coverage. Our quantitative
and qualitative analyses highlight that our adaptive approach facilitates selecting better test
inputs, which is an essential factor to test production code with fewer resources. 