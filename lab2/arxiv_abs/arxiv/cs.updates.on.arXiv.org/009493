We consider the problem of computing distance between a pattern of length $n$ and all $n$-length
subwords of a text in the streaming model. In the streaming setting, only the Hamming distance ($L_0$)
has been studied. It is known that computing the Hamming distance between a pattern and a streaming
text exactly requires $\Omega(n)$ space. Therefore, to develop sublinear-space solutions, one
must relax their requirements. One possibility to do so is to compute only the distances bounded
by a threshold $k$, see~[SODA'19, Clifford, Kociumaka, Porat]. The motivation for this variant
of this problem is that we are interested in subwords of the text that are similar to the pattern, i.e.
in subwords such that the distance between them and the pattern is relatively small. On the other
hand, the main application of the streaming setting is processing large-scale data, such as biological
data. Recent advances in hardware technology allow generating such data at a very high speed, but
unfortunately, the produced data may contain about 10\% of noise~[Biol. Direct.'07, Klebanov
and Yakovlev]. To analyse such data, it is not sufficient to consider small distances only. A possible
workaround for this issue is $(1\pm\varepsilon)$-approximation. This line of research was initiated
in [ICALP'16, Clifford and Starikovskaya] who gave a $(1\pm\varepsilon)$-approximation algorithm
with space $\widetilde{O}(\varepsilon^{-5}\sqrt{n})$. In this work, we show a suite of new streaming
algorithms for computing the Hamming, $L_1$, $L_2$ and general $L_p$ ($0 < p \le 2$) distances between
the pattern and the text. Our results significantly extend over the previous result in this setting.
In particular, for the Hamming distance case and for the $L_p$ distance when $0 < p \le 1$ we show a streaming
algorithm that uses $\widetilde{O}(\varepsilon^{-2}\sqrt{n})$ space for polynomial-size
alphabets. 