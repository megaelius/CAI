In recent years, a number of researchers have suggested that the extensional equality in type theory
is the canonical logical relation defined by induction on type structure (Tait [1998], Altenkirch
et al [2008], Coquand [2010], Harper et al [2013]). Here we make this position explicit in the statement
of Extensionality Thesis. One key difficulty facing this approach is that, since the extensional
logical relation is a meta-level concept, having it as a type in the language of type theory requires
to iterate the logical relations construction infinitely many times, or consider structures providing
the requisite data at infinitely many dimensions simultaneously. Our key result is a solution to
this problem. We first define lambda-e, a minimal extension of dependent type theory in which the
logical relations appearing in the proof of Tait's extensionality theorem do not take one outside
the system, but stay within its type structure. We then prove the extensionality theorem for this
system. (At this point, one can read off from a given type an infinite globular structure which is
generated by the logical conditions.) The stratified version of lambda-e has the usual properties
of typed lambda calculi, such as confluence and normalization. Our next step is to internalize the
extensionality theorem by adding a new operator into the language. This operator behaves much like
a higher-dimensional version of explicit substitution. We therefore do not expect strong normalization,
but any number of efficient normalizing strategies. A key property of this calculus is that any mathematical
structure can be transported over an extensional equality (in the context where it's defined) internally
in the system, which operation has explicit operational semantics. 