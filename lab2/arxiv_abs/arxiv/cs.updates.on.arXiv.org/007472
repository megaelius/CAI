A branch of automated program repair (APR) techniques look at finding and reusing existing code
for bug repair. ssFix is one of such techniques that is syntactic search-based: it searches a code
database for code fragments that are syntactically similar to the bug context and reuses such retrieved
code fragments to produce patches. Using such a syntactic approach, ssFix is relatively lightweight
and was shown to outperform many other APR techniques. In this paper, to investigate the true effectiveness
of ssFix, we conducted multiple experiments to validate ssFix's built-upon assumption (i.e.,
to see whether it is often possible to reuse existing code for bug repair) and evaluate its code search
and code reuse approaches. Our results show that while the basic idea of ssFix, i.e., reusing existing
code for bug repair, is promising, the approaches ssFix uses are not the best and can be significantly
improved. We proposed a new repair technique sharpFix which follows ssFix's basic idea but differs
in the code search and reuse approaches used. We evaluated sharpFix and ssFix on two bug datasets:
Defects4J and Bugs.jar-ELIXIR. The results confirm that sharpFix is an improvement over ssFix.
For the Defects4J dataset, sharpFix successfully repaired a total of 36 bugs and outperformed many
existing repair techniques in repairing more bugs. For the Bugs.jar-ELIXIR dataset, we compared
sharpFix, ssFix, and four other APR techniques, and found that sharpFix has the best repair performance.
In essence, the paper shows how effective a syntactic search-based approach can be and what techniques
should be used for such an approach. 