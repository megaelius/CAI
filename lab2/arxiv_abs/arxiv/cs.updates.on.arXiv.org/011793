We introduce and investigate the approximability of the maximum binary tree problem (MBT) in directed
and undirected graphs. The goal in MBT is to find a maximum-sized binary tree in a given graph. MBT
is a natural variant of the well-studied longest path problem, since both can be viewed as finding
a maximum-sized tree of bounded degree in a given graph. The connection to longest path motivates
the study of MBT in directed acyclic graphs (DAGs), since the longest path problem is solvable efficiently
in DAGs. In contrast, we show that MBT in DAGs is in fact hard: it has no efficient $\exp(-O(\log n/
\log \log n))$-approximation algorithm under the exponential time hypothesis, where $n$ is the
number of vertices in the input graph. In undirected graphs, we show that MBT has no efficient $\exp(-O(\log^{0.63}{n}))$-approximation
under the exponential time hypothesis. Our inapproximability results rely on self-improving
reductions and structural properties of binary trees. We also show constant-factor inapproximability
under the $P \neq NP$ assumption. In addition to inapproximability results, we present algorithmic
results along two different flavors: (1) We design a randomized algorithm to verify if a given directed
graph on $n$ vertices contains a binary tree of size $k$ in $2^k \text{poly}(n)$ time. (2) Motivated
by the longest heapable subsequence problem, introduced by Byers, Heeringa, Mitzenmacher, and
Zervas (ANALCO 2011), which is equivalent to MBT in permutation DAGs, we study MBT in restricted
graph families. We design efficient algorithms for two graph families: bipartite permutation
graphs and bounded treewidth graphs. 