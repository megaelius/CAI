Software bugs are prevalent in modern software systems and notoriously hard to debug manually.
Therefore, a large body of research efforts have been dedicated to automated software debugging,
including both automated fault localization and program repair. However, the existing fault localization
techniques are usually ineffective on real-world software systems while even the most advanced
program repair techniques can only fix a small ratio of real-world bugs. Although fault localization
and program repair are inherently connected, we observe that in the literature their only connection
is that program repair techniques usually use off-the-shelf fault localization techniques (e.g.,
Ochiai) to determine the potential candidate statements/elements for patching. In this work,
we explore their connection in the other direction, i.e., can program repair in turn help with fault
localization? In this way,we not only open a new dimension for more powerful fault localization,
but also extend the application scope of program repair to all possible bugs (not only the bugs that
can be directly automatically fixed).We have designed ProFL, a simplistic approach using patch-execution
results (from program repair) as the feedback information for fault localization. The experimental
results on the widely used Defects4J benchmark show that the basic ProFL can already localize 161
of the 395 studied bugs within Top-1, while state-of-the-art spectrum and mutation based fault
localization techniques at most localize 117 within Top-1. We also demonstrate ProFL's effectiveness
under different settings. Lastly, we show that ProFL can further boost state-of-the-art fault
localization via both unsupervised and supervised learning. 