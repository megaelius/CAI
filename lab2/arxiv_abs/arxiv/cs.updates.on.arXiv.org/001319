In order to efficiently use the future generations of supercomputers, fault tolerance and power
consumption are two of the prime challenges anticipated by the High Performance Computing (HPC)
community. Checkpoint/Restart (CR) has been and still is the most widely used technique to deal
with hard failures. Application-level CR is the most effective CR technique in terms of overhead
efficiency but it takes a lot of implementation effort. This work presents the implementation of
our C++ based library CRAFT (Checkpoint-Restart and Automatic Fault Tolerance), which serves
two purposes. First, it provides an extendable library that significantly eases the implementation
of application-level checkpointing. The most basic and frequently used checkpoint data types
are already part of CRAFT and can be directly used out of the box. The library can be easily extended
to add more data types. As means of overhead reduction, the library offers a build-in asynchronous
checkpointing mechanism and also supports the Scalable Checkpoint/Restart (SCR) library for
node level checkpointing. Second, CRAFT provides an easier interface for User-Level Failure Mitigation
(ULFM) based dynamic process recovery, which significantly reduces the complexity and effort
of failure detection and communication recovery mechanism. By utilizing both functionalities
together, applications can write application-level checkpoints and recover dynamically from
process failures with very limited programming effort. This work presents the design and use of
our library in detail. The associated overheads are thoroughly analyzed using several benchmarks.
