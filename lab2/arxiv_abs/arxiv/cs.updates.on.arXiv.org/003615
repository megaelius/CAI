We address the following general question: given a graph class C on which we can solve Maximum Matching
in (quasi) linear time, does the same hold true for the class of graphs that can be modularly decomposed
into C ? A major difficulty in this task is that the Maximum Matching problem is not preserved by quotient,
thereby making difficult to exploit the structural properties of the quotient subgraphs of the
modular decomposition. So far, we are only aware of a recent framework in [Coudert et al., SODA'18]
that only applies when the quotient subgraphs have bounded order and/or under additional assumptions
on the nontriv-ial modules in the graph. As a first attempt toward improving this framework we study
the combined effect of modular decomposition with a pruning process over the quotient subgraphs.
More precisely, we remove sequentially from all such subgraphs their so-called one-vertex extensions
(i.e., pendant, anti-pendant, twin, universal and isolated vertices). Doing so, we obtain a "pruned
modular decomposition", that can be computed in O(m log n)-time. Our main result is that if all the
pruned quotient subgraphs have bounded order then a maximum matching can be computed in linear time.
This result is mostly based on two pruning rules on pendant and anti-pendant modules -- that are adjacent,
respectively, to one or all but one other modules in the graph. Furthermore, these two latter rules
are surprisingly intricate and we consider them as our main technical contribution in the paper.
We stress that the class of graphs that can be totally decomposed by the pruned modular decomposition
contains all the distance-hereditary graphs, and so, it is larger than cographs. In particular,
as a byproduct of our approach we also obtain the first known linear-time algorithms for Maximum
Matching on distance-hereditary graphs and graphs with modular-treewidth at most one. Finally,
we can use an extended version of our framework in order to compute a maximum matching, in linear-time,
for all graph classes that can be modularly decomposed into cycles. Our work is the first to explain
why the existence of some nice ordering over the modules of a graph, instead of just over its vertices,
can help to speed up the computation of maximum matchings on some graph classes. 