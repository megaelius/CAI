Inconsistency robustness is "information system performance in the face of continually pervasive
inconsistencies." A fundamental principle of Inconsistency Robustness is to make contradictions
explicit so that arguments for and against propositions can be formalized. This paper explores
the role of Inconsistency Robustness in the history and theory of Logic Programming, which can be
usefully defined as "using logic to infer computational steps." Inconsistency Robustness has
been a continually recurring issue in Logic Programming from its beginnings. Robert Kowalski put
forward a bold thesis: "Looking back on our early discoveries, I value most the discovery that computation
could be subsumed by deduction." However, mathematical logic cannot always infer computational
steps because computational systems make use of arbitration for determining which message is processed
next by a recipient that is sent multiple messages concurrently. Since reception orders are in general
indeterminate, they cannot be inferred from prior information by mathematical logic alone. Therefore
mathematical logic cannot in general implement computation Over the course of history, the term
"functional programming" has grown more precise and technical as the field has matured. Logic Programming
should be on a similar trajectory. Accordingly, "Logic Programming" should have a general precise
characterization. Kowalski's approach has been to advocate limiting Logic Programming to backward-chaining
only inference based on resolution using reduction to conjunctive normal form in a global states
model. In contrast, our approach is explore Logic Programming building on the logical inference
of computational steps using inconsistency-robust reasoning. The above examples are illustrative
of how issues of inconsistency robustness have repeatedly arisen in logic programming. 