The interval scheduling problem is one variant of the scheduling problem. In this paper, we propose
a novel variant of the interval scheduling problem, whose definition is as follows: given jobs are
specified by their {\em release times}, {\em deadlines} and {\em profits}. An algorithm must start
a job at its release time on one of $m$ identical machines, and continue processing until its deadline
on the machine to complete the job. All the jobs must be completed and the algorithm can obtain the
profit of a completed job as a user's satisfaction. It is possible to process more than one job at a
time on one machine. The profit of a job is distributed uniformly between its release time and deadline,
that is its interval, and the profit gained from a subinterval of a job decreases in reverse proportion
to the number of jobs whose intervals intersect with the subinterval on the same machine. The objective
of our variant is to maximize the total profit of completed jobs. This formulation is naturally motivated
by best-effort requests and responses to them, which appear in many situations. In best-effort
requests and responses, the total amount of available resources for users is always invariant and
the resources are equally shared with every user. We study online algorithms for this problem. Specifically,
we show that for the case where the profits of jobs are arbitrary, there does not exist an algorithm
whose competitive ratio is bounded. Then, we consider the case in which the profit of each job is equal
to its length, that is, the time interval between its release time and deadline. For this case, we
prove that for $m = 2$ and $m \geq 3$, the competitive ratios of a greedy algorithm are at most $4/3$
and at most $3$, respectively. Also, for each $m \geq 2$, we show a lower bound on the competitive ratio
of any deterministic algorithm. 