High-performance computing systems (HPC) provide powerful capabilities for modeling, simulation,
and data analytics for a broad class of computational problems. HPC system designs are undergoing
rapid changes in their hardware architectures and the software environments as the community pursues
increasingly capable systems. Among the key challenges for future generations of HPC systems is
ensuring efficient and correct operation despite the occurrence of faults or defects in system
components, which are likely to cause errors and failures. Such events affect the correctness of
the scientific applications, or may lead to their untimely termination. Future generations of
HPC systems will consist of millions of compute, memory and storage components and the growing complexity
of these computing behemoths increases the chances that a single fault event will cascade across
the machine and bring down the entire system. Therefore, designing a HPC system, or even hardware
and software components, requires designers to contemplate the impact of their choices on system
performance, power consumption and resilience to faults. Resilience design patterns capture
the essential techniques that are employed to solve recurring problems in the design of resilience
solutions for HPC systems. In this paper, we present a pattern language for engineering resilience
solutions, which is intended to be useful for hardware and software designers, as well as the users
and operators of HPC systems. The pattern language is intended to systematically design complete
resilience solutions, and to explore alternative solutions that have different efficiency and
complexity characteristics. The pattern-based solutions may be deployed at design time or runtime
to enable HPC systems to deal with various types of faults, errors and failures. 