The Lov\'asz Local Lemma (LLL) is a probabilistic tool which shows that, if a collection of "bad"
events $\mathcal B$ in a probability space are not too likely and not too interdependent, then there
is a positive probability that no bad-events in $\mathcal B$ occur. Moser & Tardos (2010) gave sequential
and parallel algorithms which transformed most applications of the variable-assignment LLL into
efficient algorithms. There has been limited success in developing parallel algorithms for more
generalized forms of the LLL. Harris (2016) developed RNC algorithms for the variable-assignment
Lopsided Lov\'asz Local Lemma (LLLL) and Harris & Srinivasan (2014) developed an algorithm for
the permutation LLL. These algorithms are cumbersome and limited in the types of bad-events they
can handle (limitations not shared for the standard LLL). Kolmogorov (2016) developed a framework
which partially parallelizes LLL settings such as random matchings of $K_n$, although key algorithm
components remained missing. We give new parallel algorithms for most forms of LLLL, which are simpler,
faster, and more general than the algorithms of Harris and Harris & Srinivasan. This also includes
probability spaces for which no previous RNC algorithm was known, including matchings and hamiltonian
cycles of $K_n$. We achieve this by providing a unified algebraic framework for applications of
the LLLL to permutations. The parallel LLLL algorithm is based on new primitive for parallel computing,
which we refer to as the \emph{lexicographically-first maximal-independent-set} of a directed
graph. We give an efficient algorithm for constructing this and show that it is precisely what is
needed for our LLLL algorithms. This generalizes an algorithm given by Blelloch, Fineman, Shun
(2012) for undirected graphs. 