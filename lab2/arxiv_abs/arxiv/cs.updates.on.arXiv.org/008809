Many Internet of Things and embedded projects are event-driven, and therefore require asynchronous
and concurrent programming. Current proposals for C++20 suggest that coroutines will have native
language support. It is timely to survey the current use of coroutines in embedded systems development.
This paper investigates existing research which uses or describes coroutines on resource-constrained
platforms. The existing research is analysed with regard to: software platform, hardware platform
and capacity; use cases and intended benefits; and the application programming interface design
used for coroutines. A systematic mapping study was performed, to select studies published between
2007 and 2018 which contained original research into the application of coroutines on resource-constrained
platforms. An initial set of 566 candidate papers were reduced to only 35 after filters were applied,
revealing the following taxonomy. The C & C++ programming languages were used by 22 studies out of
35. As regards hardware, 16 studies used 8- or 16-bit processors while 13 used 32-bit processors.
The four most common use cases were concurrency (17 papers), network communication (15), sensor
readings (9) and data flow (7). The leading intended benefits were code style and simplicity (12
papers), scheduling (9) and efficiency (8). A wide variety of techniques have been used to implement
coroutines, including native macros, additional tool chain steps, new language features and non-portable
assembly language. We conclude that there is widespread demand for coroutines on resource-constrained
devices. Our findings suggest that there is significant demand for a formalised, stable, well-supported
implementation of coroutines in C++, designed with consideration of the special needs of resource-constrained
devices, and further that such an implementation would bring benefits specific to such devices.
