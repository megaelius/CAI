Runtime verification is checking whether a system execution satisfies or violates a given correctness
property. A procedure that automatically, and typically on the fly, verifies conformance of the
system's behavior to the specified property is called a monitor. Nowadays, a variety of formalisms
are used to express properties on observed behavior of computer systems, and a lot of methods have
been proposed to construct monitors. However, it is a frequent situation when advanced formalisms
and methods are not needed, because an executable model of the system is available. The original
purpose and structure of the model are out of importance; rather what is required is that the system
and its model have similar sets of interfaces. In this case, monitoring is carried out as follows.
Two "black boxes", the system and its reference model, are executed in parallel and stimulated with
the same input sequences; the monitor dynamically captures their output traces and tries to match
them. The main problem is that a model is usually more abstract than the real system, both in terms
of functionality and timing. Therefore, trace-to-trace matching is not straightforward and allows
the system to produce events in different order or even miss some of them. The paper studies on-the-fly
conformance relations for timed systems (i.e., systems whose inputs and outputs are distributed
along the time axis). It also suggests a practice-oriented methodology for creating and configuring
monitors for timed systems based on executable models. The methodology has been successfully applied
to a number of industrial projects of simulation-based hardware verification. 