Applications' performance is influenced by the mapping of processes to computing nodes, the frequency
and volume of exchanges among processing elements, the network capacity, and the routing protocol.
A poor mapping of application processes degrades performance and wastes resources. Process mapping
is frequently ignored as an explicit optimization step since the system typically offers a default
mapping, users may lack awareness of their applications' communication behavior, and the opportunities
for improving performance through mapping are often unclear. This work studies the impact of application
process mapping on several processor topologies. We propose a workflow that renders mapping as
an explicit optimization step for parallel applications. We apply the workflow to a set of four applications,
twelve mapping algorithms, and three direct network topologies. We assess the mappings' quality
in terms of volume, frequency, and distance of exchanges using metrics such as dilation (measured
in hop$\cdot$Byte). With a parallel trace-based simulator, we predict the applications' execution
on the three topologies using the twelve mappings. We evaluate the impact of process mapping on the
applications' simulated performance in terms of execution and communication times and identify
the mappings that achieve the highest performance in both cases. To ensure the correctness of the
simulations, we compare the pre- and post-simulation results. This work emphasizes the importance
of process mapping as an explicit optimization step and offers a solution for parallel applications
to exploit the full potential of the allocated resources on a given system. 