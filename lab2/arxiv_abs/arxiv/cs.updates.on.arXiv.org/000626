Inconsistency robustness is "information system performance in the face of continually pervasive
inconsistencies." A fundamental principle of Inconsistency Robustness is to make contradictions
explicit so that arguments for and against propositions can be formalized. This paper explores
the role of Inconsistency Robustness in the history and theory of Logic Programs. Robert Kowalski
put forward a bold thesis: "Looking back on our early discoveries, I value most the discovery that
computation could be subsumed by deduction." However, mathematical logic cannot always infer
computational steps because computational systems make use of arbitration for determining which
message is processed next by a recipient that is sent multiple messages concurrently. Since reception
orders are in general indeterminate, they cannot be inferred from prior information by mathematical
logic alone. Therefore mathematical logic cannot in general implement computation. Over the course
of history, the term "Functional Program" has grown more precise and technical as the field has matured.
"Logic Program" should be on a similar trajectory. Accordingly, "Logic Program" should have a general
precise characterization. In the fall of 1972, different characterizations of Logic Programs
that have continued to this day: * A Logic Program uses Horn-Clause syntax for forward and backward
chaining * Each computational step (according to Actor Model) of a Logic Program is deductively
inferred (e.g. in Direct Logic). The above examples are illustrative of how issues of inconsistency
robustness have repeatedly arisen in Logic Programs. 