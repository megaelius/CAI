The growing adoption of IT-systems for the modelling and execution of (business) processes or services
has thrust the scientific investigation towards techniques and tools which support complex forms
of process analysis. These techniques rely on observation of past (tracked and logged) process
executions but typically: (i) only consider activities, lacking the ability to take into account
the data objects manipulated by these activities and (ii) assume complete observations of terminated
process executions. In many real cases, however, only incomplete log information is available.
This paper tackles these two shortcomings by proposing an approach to exploit reachability to reason
on imperative data-aware process models and possibly incomplete process executions. The contribution
of this paper is twofold: first, it formulates the trace completion as a reachability problem over
data-aware models and second, it provides a rigorous mapping between our data-aware models and
three important paradigms for reasoning about dynamic systems, namely Action Languages, Classical
Planning, and Model-Checking. This allows us to exploit and extensively evaluate the available
tools for the above paradigms to solve the trace repair problem. The rigorous encoding of our data-aware
models, based on a common interpretation of the semantics of Action Languages, Classical Planning,
and Model-Checking in terms of transition systems, paired with a first comprehensive assessment
of the performances of their tools in computing reachability for data-aware workflow net languages,
provide a solid contribution to advancing the state-of-the-art on the concrete exploitation of
formal verification techniques on business processes. 