In recent years, Quantum Computing (QC) has progressed to the point where small working prototypes
are available for use. Termed Noisy Intermediate-Scale Quantum (NISQ) computers, these prototypes
are too small for large benchmarks or even for Quantum Error Correction, but they do have sufficient
resources to run small benchmarks, particularly if compiled with optimizations to make use of scarce
qubits and limited operation counts and coherence times. QC has not yet, however, settled on a particular
preferred device implementation technology, and indeed different NISQ prototypes implement
qubits with very different physical approaches and therefore widely-varying device and machine
characteristics. Our work performs a full-stack, benchmark-driven hardware-software analysis
of QC systems. We evaluate QC architectural possibilities, software-visible gates, and software
optimizations to tackle fundamental design questions about gate set choices, communication topology,
the factors affecting benchmark performance and compiler optimizations. In order to answer key
cross-technology and cross-platform design questions, our work has built the first top-to-bottom
toolflow to target different qubit device technologies, including superconducting and trapped
ion qubits which are the current QC front-runners. We use our toolflow, TriQ, to conduct {\em real-system}
measurements on 7 running QC prototypes from 3 different groups, IBM, Rigetti, and University of
Maryland. From these real-system experiences at QC's hardware-software interface, we make observations
about native and software-visible gates for different QC technologies, communication topologies,
and the value of noise-aware compilation even on lower-noise platforms. This is the largest cross-platform
real-system QC study performed thus far; its results have the potential to inform both QC device
and compiler design going forward. 