Computer programs fast entered in our live and the questions associated with the execution of these
programs have become the most relevant in our days. Programs should work efficiently, i.e. work
as quickly as possible and spend as little resources as possible. Most often, such a "measure of efficiency"
is the polynomial program execution time of the length of the input data. In this article will introduce
the method of $\Delta_0^p$-enrichments which will show how to switch from the usual polynomial
model of $\mathfrak{M}$ using $\Delta_0^p$-enrichments to a model with new properties and new
elements so that the new model will also be polynomial. Thus, we will show how to create new classes
of objects whose set will be polynomially computable. We will also prove the theorem about $\Delta_0^p-$fixed
point, which is a natural polynomial analogue of the Gandy fixed point theorem and allows us to take
a different look at polynomial computability. In the 1970s and 1980s, Yu.L.Ershov, S.S.Goncharov,
and D.I.Sviridenko proposed a direction of semantic programming based on the hereditary-finite
lists super structure $HW(\mathfrak{M})$. The main goal of our article is to creating programs
whose temporal computational complexity will be polynomial. Method $\Delta_0^p$-enrichments
will help consider any program written in a high-level language as a logical formula in a suitable
model. And the calculation of the program is the same as checking the truth of the formula on it. Therefore,
the transition from calculating programs written in high-level languages to verifying the validity
of formulas on a model is natural. 