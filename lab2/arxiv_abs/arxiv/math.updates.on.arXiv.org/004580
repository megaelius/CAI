Computer programs fast entered in our life and the questions associated with the execution of these
programs have become the most relevant in our days. Programs should work efficiently, i.e. work
as quickly as possible and spend as little resources as possible. Most often, such a "measure of efficiency"
is the polynomial program execution time of the length of the input data. Such programs have great
importance in the direction of smart contracts on blockchain. In this article will be introduced
the method of $\Delta_0^p$-enrichments which will show how to switch from the usual polynomial
model of $\mathfrak{M}^{(0)}$ using $\Delta_0^p$-enrichments to a model with new properties
and new elements so that the new model will also be polynomial. $\Delta_0^p-$enrichments: $\mathfrak{M}^{(0)}\to
... \to \mathfrak{M}^{(i)} \to ...\to\mathfrak{M}$ This method based on theory of semantic programming
entered in 1970s and 1980s, academics Ershov and Goncharov and professor Sviridenko. New element
$w$ for $M^{(i+1)}$ and not in $M^{(i)}$ generate with some $\Delta_0^p-$formula $\Phi_k$ from
family $F_j$ for one place predicate $P_j$: $\mathfrak{M}^{(i)}\models\Phi_k(w_1,...,w_{n_k})$,
where $w$ is finite list $w = <w_1,...,w_{n_k}>$ and now $\mathfrak{M}^{(i+1)}\models P_j(w)$.
Then we will create an operator $\Gamma_{F_{P_1^+},...,F_{P_N^+}}^\mathfrak{M^{(i)}}$ and
prove polynomial analogue of the Gandy fixed point theorem. It allows us to take a different look
on polynomial computability. Let $\Gamma^*$: $\Gamma_{F_{P_1^+},...,F_{P_N^+}}^\mathfrak{M}(\Gamma^*)
= \Gamma^*$ Theorem (polynomial analogue of the Gandy fixed point theorem) Fixed point $\Gamma^*$
is $\Delta_0^p-$set and $P_1,...,P_N$ - $\Delta_0^p-$predicates on $\mathfrak{M}$ Also proved
extended theorem about fixed point and for $HW(\mathfrak{M})$ model 