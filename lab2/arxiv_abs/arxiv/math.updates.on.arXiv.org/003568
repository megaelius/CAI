We present a new connection between self-adjusting binary search trees (BSTs) and heaps, two fundamental,
extensively studied, and practically relevant families of data structures. Roughly speaking,
we map an arbitrary heap algorithm within a natural model, to a corresponding BST algorithm with
the same cost on a dual sequence of operations (i.e. the same sequence with the roles of time and key-space
switched). This is the first general transformation between the two families of data structures.
There is a rich theory of dynamic optimality for BSTs (i.e. the theory of competitiveness between
BST algorithms). The lack of an analogous theory for heaps has been noted in the literature. Through
our connection, we transfer all instance-specific lower bounds known for BSTs to a general model
of heaps, initiating a theory of dynamic optimality for heaps. On the algorithmic side, we obtain
a new, simple and efficient heap algorithm, which we call the smooth heap. We show the smooth heap
to be the heap-counterpart of Greedy, the BST algorithm with the strongest proven and conjectured
properties from the literature, widely believed to be instance-optimal. Assuming the optimality
of Greedy, the smooth heap is also optimal within our model of heap algorithms. As corollaries of
results known for Greedy, we obtain instance-specific upper bounds for the smooth heap, with applications
in adaptive sorting. Intriguingly, the smooth heap, although derived from a non-practical BST
algorithm, is simple and easy to implement (e.g. it stores no auxiliary data besides the keys and
tree pointers). It can be seen as a variation on the popular pairing heap data structure, extending
it with a "power-of-two-choices" type of heuristic. 